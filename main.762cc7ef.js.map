{"version":3,"sources":["scripts/main.js"],"names":["board","score","rows","columns","field","document","querySelector","button","startingMsg","winnigMsg","loseMsg","buttonHandler","innerText","classList","contains","replace","add","setEmptyBoard","i","j","updateTile","cells","setBoard","isEmptyTile","r","c","check","row","Math","floor","random","cell","tile","num","className","textContent","toString","remove","gameHasMove","filterZero","filter","slide","length","push","slideLeft","slideRight","reverse","slideUp","slideDown","isNextSame","isBelowSame","addEventListener","e","pressedKey","key"],"mappings":"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","file":"main.762cc7ef.js","sourceRoot":"..\\src","sourcesContent":["/* eslint-disable no-param-reassign */\n/* eslint-disable no-console */\n'use strict';\n\n// write your code here\n\nlet board;\nlet score = 0;\nconst rows = 4;\nconst columns = 4;\nconst field = document.querySelector('tbody');\nconst button = document.querySelector('button');\nconst startingMsg = document.querySelector('.message-start');\nconst winnigMsg = document.querySelector('.message-win');\nconst loseMsg = document.querySelector('.message-lose');\n\nbutton.addEventListener('click', buttonHandler);\n\nfunction buttonHandler() {\n  score = 0;\n  document.querySelector('.game-score').innerText = score;\n\n  if (button.classList.contains('start')) {\n    button.classList.replace('start', 'restart');\n    button.innerText = 'Restart';\n    startingMsg.classList.add('hidden');\n    setEmptyBoard();\n  } else {\n    winnigMsg.classList.add('hidden');\n    loseMsg.classList.add('hidden');\n    setEmptyBoard();\n  }\n}\n\nfunction setEmptyBoard() {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < columns; j++) {\n      const gameCell = field.rows[i].cells[j];\n      const num = board[i][j];\n\n      updateTile(gameCell, num);\n    }\n  }\n  setBoard();\n  setBoard();\n}\n\nfunction isEmptyTile() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < rows; c++) {\n      if (board[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction setBoard() {\n  if (!isEmptyTile()) {\n    return;\n  }\n\n  let check = false;\n\n  while (!check) {\n    const row = Math.floor(Math.random() * rows);\n    const cell = Math.floor(Math.random() * columns);\n\n    if (board[row][cell] === 0) {\n      const tile = field.rows[row].cells[cell];\n\n      board[row][cell] = Math.random() >= 0.9 ? 4 : 2;\n      tile.innerText = board[row][cell];\n      tile.classList.add(`field-cell--${board[row][cell]}`);\n    }\n    check = true;\n  }\n}\n\ndocument.addEventListener('keyup', (e) => {\n  const pressedKey = e.key;\n\n  switch (pressedKey) {\n    case 'ArrowUp':\n      slideUp();\n      setBoard();\n      break;\n    case 'ArrowDown':\n      slideDown();\n      setBoard();\n      break;\n    case 'ArrowLeft':\n      slideLeft();\n      setBoard();\n      break;\n    case 'ArrowRight':\n      slideRight();\n      setBoard();\n      break;\n\n    default:\n      break;\n  }\n});\n\nfunction updateTile(tile, num) {\n  tile.innerText = '';\n  tile.className = 'field-cell';\n  document.querySelector('.game-score').textContent = score.toString();\n\n  if (num > 0) {\n    tile.innerText = num.toString();\n    tile.classList.add(`field-cell--${num}`);\n\n    if (num === 2048) {\n      winnigMsg.classList.remove('hidden');\n\n      return;\n    }\n  }\n\n  gameHasMove();\n}\n\nfunction filterZero(row) {\n  return row.filter((num) => num !== 0);\n}\n\nfunction slide(row) {\n  row = filterZero(row);\n\n  for (let i = 0; i < row.length - 1; i++) {\n    if (row[i] === row[i + 1]) {\n      row[i] *= 2;\n      row[i + 1] = 0;\n      score += row[i];\n    }\n  }\n\n  row = filterZero(row);\n\n  while (row.length < columns) {\n    row.push(0);\n  }\n\n  return row;\n}\n\nfunction slideLeft() {\n  for (let r = 0; r < rows; r++) {\n    let row = board[r];\n\n    row = slide(row);\n    board[r] = row;\n\n    for (let c = 0; c < columns; c++) {\n      const cell = field.rows[r].cells[c];\n\n      const num = board[r][c];\n\n      updateTile(cell, num);\n    }\n  }\n}\n\nfunction slideRight() {\n  for (let r = 0; r < rows; r++) {\n    let row = board[r];\n\n    row.reverse();\n\n    row = slide(row);\n    row.reverse();\n    board[r] = row;\n\n    for (let c = 0; c < columns; c++) {\n      const cell = field.rows[r].cells[c];\n\n      const num = board[r][c];\n\n      updateTile(cell, num);\n    }\n  }\n}\n\nfunction slideUp() {\n  for (let c = 0; c < columns; c++) {\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    row = slide(row);\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = row[r];\n\n      const cell = field.rows[r].cells[c];\n\n      const num = board[r][c];\n\n      updateTile(cell, num);\n    }\n  }\n}\n\nfunction slideDown() {\n  for (let c = 0; c < columns; c++) {\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = row[r];\n\n      const cell = field.rows[r].cells[c];\n\n      const num = board[r][c];\n\n      updateTile(cell, num);\n    }\n  }\n}\n\nfunction gameHasMove() {\n  if (isEmptyTile()) {\n    return;\n  }\n\n  for (let row = 0; row < rows; row++) {\n    for (let cell = 0; cell < columns - 1; cell++) {\n      const isNextSame = board[row][cell] === board[row][cell + 1];\n      const isBelowSame = board[cell][row] === board[cell + 1][row];\n\n      if (isNextSame || isBelowSame) {\n        return;\n      }\n    }\n  }\n  loseMsg.classList.remove('hidden');\n}\n"]}